// This code is licensed under the same terms as Habitica:
  // https://raw.githubusercontent.com/HabitRPG/habitrpg/develop/LICENSE

/* ========================================== */
/* [Users] Required script data to fill in    */
/* ========================================== */
const USER_ID = "4e7098c8-80fc-4228-9478-0d9a9e9d7c97";
const API_TOKEN = "6242473e-9222-4493-83bc-896b1215bc71"; // Do not share this to anyone
const WEB_APP_URL = "https://script.google.com/macros/s/AKfycbxWzJmBOUvQ0L7ZkAx89bCoNYoOSD78xGiheGbg2-DZhhvWfOZv/exec";

/* ========================================== */
/* [Users] Required customizations to fill in */
/* ========================================== */
const CREATE_GAIN_GOLD_LVL1_SPELL = 1; // Change this 1 to a 0 if you don't want the Conjure Gold spell (you lose Mana)
const CREATE_GAIN_GOLD_LVL2_SPELL = 1; // Change this 1 to a 0 if you don't want the Blood-Diamond Transmutation spell (you lose Health and Mana)
const CREATE_GAIN_GOLD_LVL3_SPELL = 1; // Change this 1 to a 0 if you don't want the Synthesize Void Emerald spell (you lose Experience and Mana)

/* ========================================== */
/* [Users] Optional customizations to fill in */
/* ========================================== */

// Do you want to get private message notifications? (examples include if you're already at max Mana or exceeded the limit for daily potion usage) 
// If you don't want them, change the 1 to a 0 in the line below
const NOTIFICATIONS_ON = 1; 

/* ========================================== */
/* [Users] Do not edit code below this line   */
/* ========================================== */
const AUTHOR_ID = "0034eb14-b4d8-494e-8386-d3f33cff7922";
const SCRIPT_NAME = "Alchemist_Spells";
const HEADERS = {
  "x-client" : AUTHOR_ID + "-" + SCRIPT_NAME,
  "x-api-user" : USER_ID,
  "x-api-key" : API_TOKEN,
}

const scriptProperties = PropertiesService.getScriptProperties(); // Constants can have properties changed

const GAIN_GOLD_LVL1_SPELL_TEXT = "**Conjure Gold** ![Wand and Gold](https://github.com/pyroAvatar91/Habitica/blob/main/magic%20conjure%20gold_scaled.png?raw=true)";
const GAIN_GOLD_LVL1_SPELL_ALIAS = "MP-GPspell";
const GAIN_GOLD_LVL1_SPELL_NOTES = "_You conjure a gold bar out of magical essence._ Pay 30 MP, gain 25 GP (Instant Use). Must be level 20. Maximum 4 per day.";
const GAIN_GOLD_LVL1_SPELL_VALUE = "0";
const GAIN_GOLD_LVL1_SPELL_LEVEL_LOCK = 20;
const MAX_DAILY_GAIN_GOLD_LVL1_SPELL_USAGE = 4;
const MSG_GAIN_GOLD_LVL1_SPELL_LEVEL_LOCK_FAIL = "You must be at least level 20 to use this spell.";
const MSG_GAIN_GOLD_LVL1_SPELL_DAILY_USAGE_EXCEEDED = "You can only use this spell four times each day.";
const MSG_INSUFFICIENT_MP = "Insufficient Mana to use this spell."

const GAIN_GOLD_LVL2_SPELL_TEXT = "**Blood-Diamond Transmutation** ![Blood Red Diamond](https://github.com/pyroAvatar91/Habitica/blob/main/Blood-Diamond%20Dripping_scaled.png?raw=true)";
const GAIN_GOLD_LVL2_SPELL_ALIAS = "HP-GPspell";
const GAIN_GOLD_LVL2_SPELL_NOTES = "_You transmute your own life essence with magical essence into a red diamond gem._ Pay 15 HP and 20 MP, gain 50 GP (Instant Use). Must be level 30. Maximum 4 per day.";
const GAIN_GOLD_LVL2_SPELL_VALUE = "0";
const GAIN_GOLD_LVL2_SPELL_LEVEL_LOCK = 30;
const MAX_DAILY_GAIN_GOLD_LVL2_SPELL_USAGE = 4;
const MSG_GAIN_GOLD_LVL2_SPELL_LEVEL_LOCK_FAIL = "You must be at least level 30 to use this spell.";
const MSG_GAIN_GOLD_LVL2_SPELL_DAILY_USAGE_EXCEEDED = "You can only use this spell four times each day.";
const MSG_INSUFFICIENT_HP = "Insufficient Health to use this spell."

const GAIN_GOLD_LVL3_SPELL_TEXT = "**Synthesize Void Emerald** ![Dark Green Emerald](https://github.com/pyroAvatar91/Habitica/blob/main/Void%20Emerald2_scaled.png?raw=true)";
const GAIN_GOLD_LVL3_SPELL_ALIAS = "XP-GPspell";
const GAIN_GOLD_LVL3_SPELL_NOTES = "_You synthesize a rare void emerald from great intellectual focus interweaved by magical essence._ Pay 500 XP and 15 MP, gain 100 GP (Instant Use). Must be level 40. Maximum 4 per day.";
const GAIN_GOLD_LVL3_SPELL_VALUE = "0";
const GAIN_GOLD_LVL3_SPELL_LEVEL_LOCK = 40;
const MAX_DAILY_GAIN_GOLD_LVL3_SPELL_USAGE = 4;
const MSG_GAIN_GOLD_LVL3_SPELL_LEVEL_LOCK_FAIL = "You must be at least level 40 to use this spell.";
const MSG_GAIN_GOLD_LVL3_SPELL_DAILY_USAGE_EXCEEDED = "You can only use this spell four times each day.";
const MSG_INSUFFICIENT_XP = "Insufficient Experience to use this spell."

const GAIN_GOLD_LVL1_SPELL_BUTTON = {
    "text": GAIN_GOLD_LVL1_SPELL_TEXT,
    "type": "reward",
    "alias": GAIN_GOLD_LVL1_SPELL_ALIAS,
    "notes": GAIN_GOLD_LVL1_SPELL_NOTES,
    "value": GAIN_GOLD_LVL1_SPELL_VALUE,
}

const GAIN_GOLD_LVL2_SPELL_BUTTON = {
    "text": GAIN_GOLD_LVL2_SPELL_TEXT,
    "type": "reward",
    "alias": GAIN_GOLD_LVL2_SPELL_ALIAS,
    "notes": GAIN_GOLD_LVL2_SPELL_NOTES,
    "value": GAIN_GOLD_LVL2_SPELL_VALUE,
}

const GAIN_GOLD_LVL3_SPELL_BUTTON = {
    "text": GAIN_GOLD_LVL3_SPELL_TEXT,
    "type": "reward",
    "alias": GAIN_GOLD_LVL3_SPELL_ALIAS,
    "notes": GAIN_GOLD_LVL3_SPELL_NOTES,
    "value": GAIN_GOLD_LVL3_SPELL_VALUE,
}

const CRON_COUNT_KEY = "CRON_COUNT_KEY";
const MPGP_USAGE_KEY = "MPGP_USAGE_KEY";
const HPGP_USAGE_KEY = "HPGP_USAGE_KEY";
const XPGP_USAGE_KEY = "XPGP_USAGE_KEY";

var cronCountKey = "";
var MpGpUsageKey = "";
var HpGpUsageKey = "";
var XpGpUsageKey = "";

function doOneTimeSetup() {
  if ((CREATE_GAIN_GOLD_LVL1_SPELL == 1) && (CREATE_GAIN_GOLD_LVL2_SPELL == 1) && (CREATE_GAIN_GOLD_LVL3_SPELL == 1)) {
    api_createNewTaskForUser([GAIN_GOLD_LVL3_SPELL_BUTTON, GAIN_GOLD_LVL2_SPELL_BUTTON, GAIN_GOLD_LVL1_SPELL_BUTTON]);
  }
  else if ((CREATE_GAIN_GOLD_LVL1_SPELL == 1) && (CREATE_GAIN_GOLD_LVL2_SPELL == 1) && (CREATE_GAIN_GOLD_LVL3_SPELL == 0)) {
    api_createNewTaskForUser([GAIN_GOLD_LVL2_SPELL_BUTTON, GAIN_GOLD_LVL1_SPELL_BUTTON]);
  }
  else if ((CREATE_GAIN_GOLD_LVL1_SPELL == 1) && (CREATE_GAIN_GOLD_LVL2_SPELL == 0) && (CREATE_GAIN_GOLD_LVL3_SPELL == 1)) {
    api_createNewTaskForUser([GAIN_GOLD_LVL3_SPELL_BUTTON, GAIN_GOLD_LVL1_SPELL_BUTTON]);
  }
  else if ((CREATE_GAIN_GOLD_LVL1_SPELL == 0) && (CREATE_GAIN_GOLD_LVL2_SPELL == 1) && (CREATE_GAIN_GOLD_LVL3_SPELL == 1)) {
    api_createNewTaskForUser([GAIN_GOLD_LVL3_SPELL_BUTTON, GAIN_GOLD_LVL2_SPELL_BUTTON]);
  }
  else if ((CREATE_GAIN_GOLD_LVL1_SPELL == 1) && (CREATE_GAIN_GOLD_LVL2_SPELL == 0) && (CREATE_GAIN_GOLD_LVL3_SPELL == 0)) {
    api_createNewTaskForUser([GAIN_GOLD_LVL1_SPELL_BUTTON]);
  }
  else if ((CREATE_GAIN_GOLD_LVL1_SPELL == 0) && (CREATE_GAIN_GOLD_LVL2_SPELL == 1) && (CREATE_GAIN_GOLD_LVL3_SPELL == 0)) {
    api_createNewTaskForUser([GAIN_GOLD_LVL2_SPELL_BUTTON]);
  }
  else if ((CREATE_GAIN_GOLD_LVL1_SPELL == 0) && (CREATE_GAIN_GOLD_LVL2_SPELL == 0) && (CREATE_GAIN_GOLD_LVL3_SPELL == 1)) {
    api_createNewTaskForUser([GAIN_GOLD_LVL3_SPELL_BUTTON]);
  }
  
  // Next, create the webhook
  const options = {
    "scored" : true,
  }
  const payload = {
    "url" : WEB_APP_URL,
    "label" : SCRIPT_NAME + " Webhook",
    "type" : "taskActivity",
    "options" : options,
  }
  apiMult_createNewWebhookNoDuplicates(payload);
  
  // set script properties so they carry over to next session
  initScriptProperties();
}

// do things when the webhook runs
function doPost(e) {
  const dataContents = JSON.parse(e.postData.contents);
  const type = dataContents.type;
  const task = dataContents.task;
  
  // Sanitize task alias
  if ((task.alias == undefined) || (task.alias == null)) {
    task.alias = "";
  }
  
  if (type == "scored") {
    // First, run all the things that run regardless of the spell
    const response = api_getAuthenticatedUserProfile("stats,flags.cronCount");
    user = JSON.parse(response).data;
    
    var cronCountKey = CRON_COUNT_KEY;
    var MpGpUsageKey = MPGP_USAGE_KEY;
    var HpGpUsageKey = HPGP_USAGE_KEY;
    var XpGpUsageKey = XPGP_USAGE_KEY;
    
    var cronCount = Number(scriptProperties.getProperty(cronCountKey));
    var MpGpUsage = Number(scriptProperties.getProperty(MpGpUsageKey));
    var HpGpUsage = Number(scriptProperties.getProperty(HpGpUsageKey));
    var XpGpUsage = Number(scriptProperties.getProperty(XpGpUsageKey));
    
    var hp = user.stats.hp;
    var exp = user.stats.exp;
    var mp = user.stats.mp;
    var gp = user.stats.gp;
    var lvl = user.stats.lvl;
    
    // If they've Cronned, reset all counters
    if (cronCount != user.flags.cronCount) {
      cronCount = user.flags.cronCount;
      MpGpUsage = 0;
      HpGpUsage = 0;
      XpGpUsage = 0;
    }
    
    // If it was the Gain Gold Lvl 1 alias, do Gain Gold Lvl 1 (Conjure Gold) things
    if (task.alias == GAIN_GOLD_LVL1_SPELL_ALIAS){
      // If level lock fails, send failure message
      if (lvl < GAIN_GOLD_LVL1_SPELL_LEVEL_LOCK) {
        api_sendPrivateMessage({"message" : MSG_GAIN_GOLD_LVL1_SPELL_LEVEL_LOCK_FAIL, "toUserId" : USER_ID});
      }
      else {
        // Check if they've exceeded daily usage. If yes, send failure message.
        if (MpGpUsage >= MAX_DAILY_GAIN_GOLD_LVL1_SPELL_USAGE) {
          api_sendPrivateMessage({"message" : MSG_GAIN_GOLD_LVL1_SPELL_DAILY_USAGE_EXCEEDED, "toUserId" : USER_ID});
        }
        else {
          // Check if they have sufficient Mana. Send failure message if not.
          if (mp < 30) {
            api_sendPrivateMessage({"message" : MSG_INSUFFICIENT_MP, "toUserId" : USER_ID});
          }
          else {
            // Run potion as normal since all checks passed.
            api_updateUser({"stats.hp" : hp, "stats.mp" : mp - 30, "stats.exp" : exp, "stats.gp" : gp + 25});
            MpGpUsage ++;
          }
        }
      }
    }
    
    // If it was the Gain Gold Lvl 2 alias, do Gain Gold Lvl 1 (Blood-Diamond Transmutation) things
    else if (task.alias == GAIN_GOLD_LVL2_SPELL_ALIAS) {
        // If level lock fails, send failure message
        if (lvl < GAIN_GOLD_LVL2_SPELL_LEVEL_LOCK) {
          api_sendPrivateMessage({"message" : MSG_GAIN_GOLD_LVL2_SPELL_LEVEL_LOCK_FAIL, "toUserId" : USER_ID});
        }
        else {
          // Check if they've exceeded daily usage. If yes, send failure message.
          if (HpGpUsage >= MAX_DAILY_GAIN_GOLD_LVL2_SPELL_USAGE) {
            api_sendPrivateMessage({"message" : MSG_GAIN_GOLD_LVL2_SPELL_DAILY_USAGE_EXCEEDED, "toUserId" : USER_ID});
          }
		  else {
          // Check if they have sufficient Mana. Send failure message if not.
          if (mp < 20) {
            api_sendPrivateMessage({"message" : MSG_INSUFFICIENT_MP, "toUserId" : USER_ID});
          }
          else {
            // Check if they have sufficient Health. Send failure message if not.
            if (hp < 15) {
              api_sendPrivateMessage({"message" : MSG_INSUFFICIENT_HP, "toUserId" : USER_ID});
            }
            else {
              // Run potion as normal since all checks passed.
              api_updateUser({"stats.hp" : hp - 15, "stats.mp" : mp - 20, "stats.exp" : exp, "stats.gp" : gp + 50});
              HpGpUsage ++;
			}
          }
        }
      }
    }
    
    // If it was the Gain Gold Lvl 3 alias, do Gain Gold Lvl 3 (Synthesize Void Emerald) things
    else if (task.alias == GAIN_GOLD_LVL3_SPELL_ALIAS) {
      // If level lock fails, send failure message
      if (lvl < GAIN_GOLD_LVL3_SPELL_LEVEL_LOCK) {
        api_sendPrivateMessage({"message" : MSG_GAIN_GOLD_LVL3_SPELL_LEVEL_LOCK_FAIL, "toUserId" : USER_ID});
      }
      else {
        // Check if they've exceeded daily usage. If yes, send failure message.
        if (XpGpUsage >= MAX_DAILY_GAIN_GOLD_LVL3_SPELL_USAGE) {
          api_sendPrivateMessage({"message" : MSG_GAIN_GOLD_LVL3_SPELL_DAILY_USAGE_EXCEEDED, "toUserId" : USER_ID});
        }
        else {
          // Check if they have sufficient Mana. Send failure message if not.
          if (mp < 15) {
            api_sendPrivateMessage({"message" : MSG_INSUFFICIENT_MP, "toUserId" : USER_ID});
          }
          else {
          // Check if they have sufficient Experience. Send failure message if not.
			if (exp < 500) {
            api_sendPrivateMessage({"message" : MSG_INSUFFICIENT_XP, "toUserId" : USER_ID});
			}
			else {
            // Run potion as normal since all checks passed.
            api_updateUser({"stats.hp" : hp, "stats.mp" : mp - 15, "stats.exp" : exp - 500, "stats.gp" : gp + 100});
            XpGpUsage ++;
			}
		  }
        }
	  }
	}
  }
  
  // Save values to non-volatile memory
  scriptProperties.setProperty(cronCountKey, cronCount);
  scriptProperties.setProperty(MpGpUsageKey, MpGpUsage);
  scriptProperties.setProperty(HpGpUsageKey, HpGpUsage);
  scriptProperties.setProperty(XpGpUsageKey, XpGpUsage);
  
  return HtmlService.createHtmlOutput();
}

// Create custom reward buttons
function api_createNewTaskForUser(payload) {
  var params = {
    "method" : "post",
    "headers" : HEADERS,
    "contentType" : "application/json",
    "payload" : JSON.stringify(payload), // Rightmost button goes on top
    "muteHttpExceptions" : true,
  }

  var url = "https://habitica.com/api/v3/tasks/user";
  UrlFetchApp.fetch(url, params);
}

// Create a webhook if no duplicate exists
function apiMult_createNewWebhookNoDuplicates(payload) {
  const response = api_getWebhooks();
  const webhooks = JSON.parse(response).data;
  var duplicateExists = 0;
    
  for (var i in webhooks) {
    if (webhooks[i].label == payload.label) {
      duplicateExists = 1;
    }
  }
  // If webhook to be created doesn't exist yet
  if (!duplicateExists) {
    api_createNewWebhook(payload);
  }
}

// Used to see existing webhooks, and therefore if there's a duplicate
function api_getWebhooks() {
  const params = {
    "method" : "get",
    "headers" : HEADERS,
    "muteHttpExceptions" : true,
  }
  
  const url = "https://habitica.com/api/v3/user/webhook";
  return UrlFetchApp.fetch(url, params);
}

// Creates a webhook (as part of the "don't make it if there's a duplicate" function)
function api_createNewWebhook(payload) {
  const params = {
    "method" : "post",
    "headers" : HEADERS,
    "contentType" : "application/json",
    "payload" : JSON.stringify(payload),
    "muteHttpExceptions" : true,
  }
   
  const url = "https://habitica.com/api/v3/user/webhook";
  return UrlFetchApp.fetch(url, params);
}

// Sets initial properties that will be used/saved later.
function initScriptProperties() {
  scriptProperties.setProperty(CRON_COUNT_KEY, 0);
  scriptProperties.setProperty(MPGP_USAGE_KEY, 0);
  scriptProperties.setProperty(HPGP_USAGE_KEY, 0);
  scriptProperties.setProperty(XPGP_USAGE_KEY, 0);
}

// Gets user info so I can use it, especially stats like mana, experience, and level
function api_getAuthenticatedUserProfile(userFields) {
  const params = {
    "method" : "get",
    "headers" : HEADERS,
    "muteHttpExceptions" : true,
  }
  
  var url = "https://habitica.com/api/v3/user";
  if (userFields != "") {
    url += "?userFields=" + userFields;
  }

  return UrlFetchApp.fetch(url, params);
}

// Changes stats
function api_updateUser(payload) { 
  const params = {
    "method" : "put",
    "headers" : HEADERS,
    "contentType" : "application/json",
    "payload" : JSON.stringify(payload),
    "muteHttpExceptions" : true,
  }
  
  const url = "https://habitica.com/api/v3/user";
  return UrlFetchApp.fetch(url, params);
}

// Send a notification as a private message, only if they're enabled
function api_sendPrivateMessage(payload) {
  switch (NOTIFICATIONS_ON){ // Check if notifications are on, send message if yes
        case 0:
          break;        
        case 1:
            const params = {
              "method" : "post",
              "headers" : HEADERS,
              "contentType" : "application/json",
              "payload" : JSON.stringify(payload),
              "muteHttpExceptions" : true,
            }
            const url = "https://habitica.com/api/v3/members/send-private-message";
            return UrlFetchApp.fetch(url, params);
          break;
  }
}